Studi Kasus

Pada suatu instansi khursus membutuhkan sebuah aplikasi penilaian dimana semua nilai siswa dapat
tersimpan dengan rapih dan terkomputerisasi, oleh sebab itu kita harus melakukan Analisa kebutuhan
apa saja yang mendukung untuk aplikasi tersebut.
Hasil Observasi berupa
1. Aplikasi memiliki akses untuk input data siswa, guru dan nilai
2. Aplikasi dapat memberikan laporan data nilai dan remedial siswa
Dari hasil observasi maka kita dapat menentukan table relasi yang di butuhkan berupa :


Langka Kerja
1. Buat database dengan nama SISWA
2. Buat 3 tabel dengan propertis seperti gambar relasi tersebut
3. Buat halaman dimana terdapat beberapa halaman seperti berikut ini
a. Halaman Utama
Terdapat 3 menu di dalamnya
File
➔ Exit
Input
➔ Siswa
➔ Nilai
➔ Guru
Report
➔ Nilai
➔ Remedial















PEMBUATAN APLIKASI
1. Koneksi ke database
Config.java
Berikut ini adalah script untuk koneksi ke dalam database.
Buat class java dengan nama Config.java

//Library yang dibutuhkan untuk koneksi database
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
//End


//Script koneksi Config.java (Java Class)
private static Connection mysqlconfig;
public static Connection configDB()throws SQLException{
try{
String url = "jdbc:mysql//localhost:3306/siswa";
string user = "root";
String pass = "";
DriverManager.registerDriver(new com.mysql.jdbc.Driver());
mysqlconfig = DriverManager.getConnection(url, user, pass);
} catch (Exception e) {
System.err.println("Koneksi Gagal" + e.getMessage());
}
return mysqlconfig;
}
public static void main(String []args){
try{
Connection c = Config.configDB();
System.out.println(String.format
("Koneksi ke database %s" + "Berhasil", c.getCatalog()));
} catch (SQLExeption e) {
	System.out.println(e);
}
}
//End Script Koneksi


//Set lokasi saat menu di klik

siswa red = new siswa();
red.setLocationRelativeTo(this);
red.setVisible(true);
//End


//Library yang dibutuhkan program siswa
java.sql.Connection;
java.sql.DriverManager;
java.sql.SQLException;
javax.swing.JOptionPane;
javax.swing.table.DefaultTableModel;
//End



//Script untuk button tambah

try{
String sql = "INSERT INTO tb_siswa VALUES ('"+txtnis.getText()+"',
'"+txtnama.getText()+"',
'"+kelas.getSelectedItem()+"',
'"+jurusan.getSelectedItem()+
"')";
java.sql.Connection conn = (Connection)Config.configDB();
java.sql.PreparedStatement pst = conn.prepareStatement(sql);
pst.execute();
JOptionPane.showMessageDialog(null, "Penyimpanan Data Berhasil!");
} catch (Exception e) {
	JOptionPane.showMessageDialog(this, e.getMessage());
}
load_table();
kosong();
//End


//Script Untuk button edit

try{
String sql = "UPDATE tb_siswa SET nama = '"+txtnama.getText()+"',
jurusan = '"+jurusan.getSelectedItem()+"',
kelas = '"+kelas.getSelectedItem()+"'
WHERE nis = '"+txtnis.getText()+"'
";
java.sql.Connection conn = (Connection)Config.configDB();
java.sql.PreparedStatement pst = conn.prepareStatement(sql);
pst.execute();
JOptionPane.showMessageDialog(null, "Data Berhasil Diedit");
} catch (Exception e) {
JOptionPane.showMessageDialog(null, "Perubahan Data Gagal" + e.getMessage());
}
load_table();
kosong();
//End

//Script untuk menampilkan data dari database ke dalam
Jtable

int baris = datasiswa.rowAtPoint(evt.getPoint());
String nis = datasiswa.getValueAt(baris, 1).toString();
txtnis.setText(nis);
String nama = datasiswa.getValueAt(baris , 2)toString();
txtnama.setText(nama);
String kl = datasiswa.getValueAt(baris, 3)toString();
kelas.setSelectedItem(kl);
String jr = datasiswa.getValueAt(baris, 4)toString();
jurusan.setSelectedItem(jr);
//End


//Script untuk button hapus

try{
String sql = "DELETE FROM tb_siswa WHERE nis = '"+txtnis.getText()+"'";
java.sql.Connection conn = (Connection)Config.configDB();
java.sql.PreparedStatement pst = conn.prepareStatement(sql);
pst.execute();
JOptionPane.showMessageDialog(this, "Data Berhasil Dihapus");
} catch (Exception e) {
JOptionPane.showMessageDialog(this, e.getMessage());
}
load_table();
kosong();
//End

//Script untuk button kosongkan

txtnis.setText(null);
txtnama.setText(null);
kelas.setSelectedItem(this);
jurusan.setSelectedItem(this);
//End

//Setelah itu buat class baru untuk proses pemanggilan data ke table dan pemilihan data dari table
(ditaruh dipaling bawah)

//method kosong
private void kosong(){
	txtnama.setText(null);
	txtnis.setText(null);
	jurusan.setSelectedItem(this);
	kelas.setSelectedItem(this);
}
//End

//membuat tampilan model table
private void load_table() {

	DefaultTableModel model = new DefaultTableModel();
	datasiswa.setModel(model);
	model.addColumn("NO");
	model.addColumn("NIS");
	model.addColumn("NAMA");
	model.addColumn("KELAS");
	model.addColumn("JURUSAN");
//End

//menampilkan data database ke dalam table

try{
int no = 1;
String sql = "SELECT * FROM tb_siswa";
java.sql.Connnection conn = (Connection)Config.configDB();
java.sql.Statement stm = conn.createStatement();
java.sql.ResultSet res = stm.executeQuery(sql);
while(res.next()){
model.addRow(new object[] {no++, res.getString(1), res.getString(2), res.getString(3), res.getString(4)})
}
datasiswa.setModel(model);
} catch (SQLException e)
}
//End


//laporan

//Library yang dibutuhkan
import java.awt.*;
import java.sql.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
//End


//tambahkan variable konstan ini pada class utama Jframe(diatas)
DefaultTableModel tabModel, tabModell;
ResultSet Rs = null, Rsl = null;

initComponents();
tampilData();
//End


//script key pencarian
String key = txtcari.getText();
System.out.println(key);

if(key!= ""){
	cariData();
}else{
	tampilData();
}
//End

//Setelah itu untuk menampilkan data pada Jtabel kita harus membuat class
baru dengan nama TampilData() sebagai berikut
private void tampilData() {
	try{
	Object[] judul_kolom = {"NIS", "Nama", "Mapel", "Nilai"};
	tabModel = new DefaultTableModel (null, judul_kolom);
	tblnilai.setModel(tabModel);

	Connection conn = (Connection)Config.configDB();
	Statement stt = conn.createStatement();
	tabModel.getDataVector().removeAllElements();


	Rs = stt.executeQuery("SELECT * FROM tb_siswa JOIN tb_nilai ON tb_siswa.nis = tb_nilai.nis");
	while(Rs.next()){
	Object[] data = {
		Rs.getString("nis"),
		Rs.getString("nama"),
		Rs.getString("mapel"),
		Rs.getString("nilai"),
	};
	tabModel.addRow(data);
}
} catch (Exception ex) {
System.err.println(ex.getMessage());
}
}
//End

//Judul_kolom adalah title untuk Jtabel dan field dalam Rs.getString merupakan
field hasil query yang telah di jalankan untuk tampilan Jtabel.
Setelah itu kita harus membuat class untuk proses pencarian data dengan script
sebagai berikut ini :
private void cariData(String key) {
	try{
	Object[] judul_kolom = {"NIS", "Nama", "Mapel", "Nilai"};
	tabModell = new DefaultTableModel (null, judul_kolom);
	tblnilai.setModel(tabModell);

	Connection conn = (Connection)Config.configDB();
	Statement stt = conn.createStatement();
	tabModell.getDataVector().removeAllElements();


	Rsl = stt.executeQuery("SELECT * FROM tb_siswa JOIN tb_nilai ON tb_siswa.nis = tb_nilai.nis WHERE nama LIKE '%"+key+"%'");
	while(Rsl.next()){
	Object[] data = {
		Rsl.getString("nis"),
		Rsl.getString("nama"),
		Rsl.getString("mapel"),
		Rsl.getString("nilai"),
	};
	tabModell.addRow(data);
}
} catch (Exception ex) {
System.err.println(ex.getMessage());
}
}
//End


2. Membuat Laporan Remedial
Proses sama dengan pembuatan form Laporan Nilai step by step dan
codingannya, yang membedakan hanya Query saat Pencarian saja sebagai
berikut :
SELECT *FROM tb_siswa JOIN tb_nilai ON tb_siswa.nis = tb_nilai.nis WHERE
mapel LIKE '%"+key+"%' and nilai <= 78